<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Snake Game with Modes and Smooth Animation</title>
<style>
  /* Basic Reset */
  * {
    box-sizing: border-box;
  }
  body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    user-select: none;
    overflow: hidden;
  }

  /* Common Page Styles */
  .page {
    display: none;
    height: 100vh;
    width: 100vw;
    color: white;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: 20px;
  }
  .page.active {
    display: flex;
  }

  /* Specific Page Backgrounds */
  #start-page {
    background: #b22222; /* Red */
  }
  #difficulty-page {
    background: #ffcc00; /* Yellow */
    color: #222;
  }
  #game-page {
    background: #0d1117;
    color: #c9d1d9;
    position: relative;
    flex-direction: column;
  }

  /* Titles */
  h1 {
    font-size: 3rem;
    margin-bottom: 30px;
    text-shadow: 0 0 8px rgba(255 255 255 / 0.3);
  }

  /* Buttons */
  button {
    background: rgba(0,0,0,0.15);
    border: 2.5px solid currentColor;
    color: inherit;
    font-size: 1.2rem;
    margin: 12px 20px;
    padding: 14px 40px;
    border-radius: 12px;
    cursor: pointer;
    font-weight: 600;
    letter-spacing: 0.05em;
    box-shadow: 0 0 10px rgba(255 255 255 / 0.3);
    transition: background-color 0.3s ease, color 0.3s ease, transform 0.25s ease, box-shadow 0.3s ease;
    user-select: none;
    min-width: 160px;
  }
  button:hover {
    background-color: #007bff;
    color: white !important;
    box-shadow:
      0 0 12px #007bff,
      0 0 25px #007bff inset;
    transform: scale(1.08);
  }
  button:active {
    transform: scale(0.97);
    box-shadow: 0 0 10px #004c99 inset;
  }
  button:focus {
    outline: none;
  }

  /* Score */
  #score {
    position: absolute;
    top: 20px;
    left: 20px;
    font-size: 24px;
    font-weight: 700;
    text-shadow: 0 0 5px #39ff14;
    letter-spacing: 2px;
    user-select: none;
  }

  /* Game Over Text */
  #game-over {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 48px;
    color: #ff3860;
    text-shadow: 0 0 10px #ff3860;
    display: none;
    text-align: center;
    user-select: none;
  }
  #game-over span {
    display: block;
    margin-top: 20px;
    font-size: 18px;
    color: #fff;
    text-shadow: none;
    font-weight: 400;
  }

  /* Canvas */
  canvas {
    background-color: #161b22;
    border-radius: 15px;
    box-shadow:
      0 0 30px #39ff14,
      inset 0 0 20px #0f0;
    display: block;
    image-rendering: pixelated;
    margin-top: 50px;
    max-width: 90vw;
    max-height: 90vw;
    width: 400px;
    height: 400px;
    user-select: none;
  }
</style>
</head>
<body>

  <!-- Start Page -->
  <div id="start-page" class="page active">
    <h1>Welcome to Snake Game</h1>
    <button id="start-btn" type="button">Start Game</button>
  </div>

  <!-- Difficulty Select Page -->
  <div id="difficulty-page" class="page">
    <h1>Select Difficulty</h1>
    <button class="difficulty-btn" data-speed="4" type="button">Easy</button>
    <button class="difficulty-btn" data-speed="7" type="button">Medium</button>
    <button class="difficulty-btn" data-speed="12" type="button">Hard</button>
  </div>

  <!-- Game Page -->
  <div id="game-page" class="page">
    <div id="score">Score: 0</div>
    <div id="game-over">
      Game Over!
      <span>Press Restart to Play Again</span>
    </div>
    <canvas id="game" width="400" height="400"></canvas>
    <button id="restart-btn" type="button" style="margin-top: 20px; align-self: center; max-width: 200px;">Restart</button>
  </div>

  <script>
    // --- PAGE ELEMENTS ---
    const startPage = document.getElementById('start-page');
    const difficultyPage = document.getElementById('difficulty-page');
    const gamePage = document.getElementById('game-page');

    const startBtn = document.getElementById('start-btn');
    const restartBtn = document.getElementById('restart-btn');
    const difficultyButtons = document.querySelectorAll('.difficulty-btn');

    // --- GAME ELEMENTS ---
    const canvas = document.getElementById('game');
    const ctx = canvas.getContext('2d');
    const scoreEl = document.getElementById('score');
    const gameOverEl = document.getElementById('game-over');

    // --- GAME VARIABLES ---
    const gridSize = 20;
    const tileCount = canvas.width / gridSize;

    let snake;
    let direction;
    let nextDirection;
    let food;
    let score;
    let speed;
    let lastTime;
    let moveInterval;
    let elapsed;
    let gameOver;
    let snakePositions;
    let animationFrameId;

    let selectedSpeed = 6; // default speed

    // --- PAGE NAVIGATION FUNCTIONS ---
    function showPage(pageToShow) {
      [startPage, difficultyPage, gamePage].forEach(page => {
        page.classList.remove('active');
      });
      pageToShow.classList.add('active');
    }

    // --- INIT GAME FUNCTION ---
    function initGame(initSpeed) {
      cancelAnimationFrame(animationFrameId);

      snake = [{ x: 10, y: 10 }];
      direction = { x: 1, y: 0 };
      nextDirection = { x: 1, y: 0 };
      food = { x: 15, y: 15 };
      score = 0;
      speed = initSpeed;
      lastTime = 0;
      moveInterval = 1000 / speed;
      elapsed = 0;
      gameOver = false;
      snakePositions = [{ x: 10, y: 10 }];
      scoreEl.textContent = `Score: ${score}`;
      gameOverEl.style.display = 'none';
      placeFood();
      animationFrameId = requestAnimationFrame(gameLoop);
    }

    // --- PLACE FOOD ---
    function placeFood() {
      food = {
        x: Math.floor(Math.random() * tileCount),
        y: Math.floor(Math.random() * tileCount)
      };
      // Prevent food spawning on snake
      for (let segment of snake) {
        if (segment.x === food.x && segment.y === food.y) {
          placeFood();
          return;
        }
      }
    }

    // --- GAME LOOP ---
    function gameLoop(time = 0) {
      if (gameOver) return;

      if (!lastTime) lastTime = time;
      const delta = time - lastTime;
      lastTime = time;

      elapsed += delta;

      while (elapsed > moveInterval) {
        update();
        elapsed -= moveInterval;
      }

      draw(elapsed / moveInterval);

      animationFrameId = requestAnimationFrame(gameLoop);
    }

    // --- UPDATE GAME STATE ---
    function update() {
      // Update direction with prevention of reverse
      if ((nextDirection.x !== -direction.x || nextDirection.y !== -direction.y)) {
        direction = nextDirection;
      }

      // New head position
      const newHead = { x: snake[0].x + direction.x, y: snake[0].y + direction.y };

      // Wall collision
      if (
        newHead.x < 0 || newHead.x >= tileCount ||
        newHead.y < 0 || newHead.y >= tileCount
      ) {
        return endGame();
      }

      // Self collision
      for (let segment of snake) {
        if (segment.x === newHead.x && segment.y === newHead.y) {
          return endGame();
        }
      }

      snake.unshift(newHead);

      // Food collision
      if (newHead.x === food.x && newHead.y === food.y) {
        score += 10;
        scoreEl.textContent = `Score: ${score}`;
        placeFood();

        // Optional speed increase every 50 points
        if (score % 50 === 0 && speed < 15) {
          speed++;
          moveInterval = 1000 / speed;
        }
      } else {
        snake.pop();
      }

      // Update positions for smooth animation
      snakePositions = snake.map((segment, i) => {
        if (i === 0) return { x: segment.x, y: segment.y };
        const prev = snakePositions[i - 1] || segment;
        return {
          x: lerp(prev.x, segment.x, 0.8),
          y: lerp(prev.y, segment.y, 0.8),
        };
      });
    }

    // --- DRAW FUNCTION ---
    function draw(interp) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      drawGrid();
      drawFood();
      drawSnake(interp);
    }

    function drawGrid() {
      ctx.strokeStyle = '#222';
      ctx.lineWidth = 1;
      for (let i = 0; i <= tileCount; i++) {
        const pos = i * gridSize;
        ctx.beginPath();
        ctx.moveTo(pos, 0);
        ctx.lineTo(pos, canvas.height);
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0, pos);
        ctx.lineTo(canvas.width, pos);
        ctx.stroke();
      }
    }

    function drawFood() {
      const pulse = 0.5 + 0.5 * Math.sin(Date.now() / 300);
      const radius = gridSize * 0.4 + pulse * 4;

      const x = food.x * gridSize + gridSize / 2;
      const y = food.y * gridSize + gridSize / 2;

      const gradient = ctx.createRadialGradient(x, y, radius * 0.2, x, y, radius);
      gradient.addColorStop(0, 'rgba(255,0,0,0.9)');
      gradient.addColorStop(1, 'rgba(255,0,0,0)');

      ctx.fillStyle = gradient;
      ctx.beginPath();
      ctx.arc(x, y, radius, 0, Math.PI * 2);
      ctx.fill();

      ctx.fillStyle = '#ff3b3b';
      ctx.beginPath();
      ctx.arc(x, y, gridSize * 0.3, 0, Math.PI * 2);
      ctx.fill();
    }

    function drawSnake(interp) {
      for (let i = snake.length - 1; i >= 0; i--) {
        const curr = snakePositions[i];
        const prev = i === 0 ? { x: curr.x - direction.x, y: curr.y - direction.y } : snakePositions[i - 1];

        const x = lerp(prev.x, curr.x, interp);
        const y = lerp(prev.y, curr.y, interp);

        const gradient = ctx.createLinearGradient(
          x * gridSize,
          y * gridSize,
          (x + 1) * gridSize,
          (y + 1) * gridSize
        );
        gradient.addColorStop(0, `hsl(${(i * 30) % 360}, 100%, 50%)`);
        gradient.addColorStop(1, `hsl(${((i + 1) * 30) % 360}, 100%, 70%)`);

        ctx.fillStyle = gradient;
        ctx.shadowColor = `hsl(${(i * 30) % 360}, 100%, 70%)`;
        ctx.shadowBlur = 10;

        ctx.beginPath();
        ctx.fillRect(
          x * gridSize + 2,
          y * gridSize + 2,
          gridSize - 4,
          gridSize - 4
        );
        ctx.closePath();

        ctx.shadowBlur = 0;
      }
    }

    function lerp(a, b, t) {
      return a + (b - a) * t;
    }

    function endGame() {
      gameOver = true;
      gameOverEl.style.display = 'block';
    }

    // --- EVENT LISTENERS ---

    // Start button: show difficulty page
    startBtn.addEventListener('click', () => {
      showPage(difficultyPage);
    });

    // Difficulty buttons: start game with selected speed
    difficultyButtons.forEach(button => {
      button.addEventListener('click', () => {
        selectedSpeed = Number(button.getAttribute('data-speed'));
        showPage(gamePage);
        initGame(selectedSpeed);
      });
    });

    // Restart button: restart game with current speed
    restartBtn.addEventListener('click', () => {
      showPage(gamePage);
      initGame(selectedSpeed);
    });

    // Keyboard input for snake direction
    window.addEventListener('keydown', e => {
      if (gameOver) return;
      switch (e.key) {
        case 'ArrowUp':
        case 'w':
        case 'W':
          if (direction.y === 0) nextDirection = { x: 0, y: -1 };
          break;
        case 'ArrowDown':
        case 's':
        case 'S':
          if (direction.y === 0) nextDirection = { x: 0, y: 1 };
          break;
        case 'ArrowLeft':
        case 'a':
        case 'A':
          if (direction.x === 0) nextDirection = { x: -1, y: 0 };
          break;
        case 'ArrowRight':
        case 'd':
        case 'D':
          if (direction.x === 0) nextDirection = { x: 1, y: 0 };
          break;
      }
    });
  </script>

</body>
</html>